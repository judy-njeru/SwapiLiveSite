{"version":3,"sources":["components/Person/Person.js","components/Persons/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","useState","species","films","state","setState","useEffect","a","fetch","getSpecies","json","data","name","speciesResults","Promise","all","map","filmUrl","response","fetchData","imageStyle","backgroundImage","image","backgroundSize","height","width","backgroundPosition","className","style","length","film","i","key","episode_id","title","Persons","personsData","persons","imagesData","images","person","Object","assign","url","App","personsState","setPersonsState","imagesState","setImagesState","getPersons","getImages","apiResponse","fetchedPersonsData","results","fetchedImagesData","message","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iSAiEeA,G,kBA9DA,SAAAC,GAAU,IAAD,EACIC,mBAAS,CACjCC,QAAS,CAAC,sBACVC,MAAO,KAHa,mBACfC,EADe,KACRC,EADQ,KAMtBC,qBAAU,YACO,uCAAG,kCAAAC,EAAA,sEAESC,MAAMR,EAAME,QAAQ,IAF7B,cAEVO,EAFU,gBAGCA,EAAWC,OAHZ,cAGZC,EAHY,gBAIWA,EAAKC,KAJhB,cAIZC,EAJY,iBAOIC,QAAQC,IAC1Bf,EAAMG,MAAMa,IAAZ,uCAAgB,WAAMC,GAAN,iBAAAV,EAAA,sEACOC,MAAMS,GADb,cACVC,EADU,gBAEGA,EAASR,OAFZ,cAEVC,EAFU,yBAGPA,GAHO,2CAAhB,wDARc,QAOVR,EAPU,OAehBE,EAAS,CACPH,QAASW,EACTV,MAAOA,IAjBO,4CAAH,qDAqBfgB,KACC,CAACnB,IAEJ,IAAMoB,EAAa,CACjBC,gBAAgB,OAAD,OAASrB,EAAMsB,MAAf,KACfC,eAAgB,QAChBC,OAAQ,QACRC,MAAO,OACPC,mBAAoB,QAGtB,OACE,yBAAKC,UAAU,UACb,yBAAKC,MAAOR,IACZ,wBAAIO,UAAU,kBAAkB3B,EAAMY,MACtC,uBAAGe,UAAU,qBAAqBvB,EAAMF,SACxC,yBAAKyB,UAAU,UACb,kDACwB,IAAvBvB,EAAMD,MAAM0B,OACX,iDAEAzB,EAAMD,MAAMa,KAAI,SAACc,EAAMC,GACrB,OACE,wBAAIC,IAAKD,EAAGJ,UAAU,oBACpB,0CAAgBG,EAAKG,YACpBH,EAAKI,cCjCPC,EAnBC,SAAAnC,GACd,IAAIoC,EAAcpC,EAAMqC,QAAQA,QAC1BC,EAAatC,EAAMuC,OAAOA,OAE1BC,EAASJ,EAAYpB,KAAI,SAACwB,EAAQT,GAGtC,OAFAU,OAAOC,OAAOF,EAAQ,CAAElB,MAAOgB,EAAWP,KAGxC,kBAAC,EAAD,CACEC,IAAKQ,EAAOG,IACZ/B,KAAM4B,EAAO5B,KACbU,MAAOkB,EAAOlB,MACdpB,QAASsC,EAAOtC,QAChBC,MAAOqC,EAAOrC,WAIpB,OAAO,yBAAKwB,UAAU,WAAWa,ICuCpBI,MAxDf,WAAgB,IAAD,EAC2B3C,mBAAS,CAC/CoC,QAAS,KAFE,mBACNQ,EADM,KACQC,EADR,OAKyB7C,mBAAS,CAC7CsC,OAAQ,KANG,mBAKNQ,EALM,KAKOC,EALP,KASb1C,qBAAU,WACR2C,IACAC,MACC,IAEH,IAAMD,EAAU,uCAAG,gCAAA1C,EAAA,sEACOC,MAAM,gCADb,cACb2C,EADa,gBAEcA,EAAYzC,OAF1B,cAEb0C,EAFa,gBAGOA,EAAmBC,QAH1B,OAGbjB,EAHa,OAKjBU,EAAgB,CACdT,QAASD,IANM,4CAAH,qDAUVc,EAAS,uCAAG,gCAAA3C,EAAA,sEACQC,MACtB,2DAFc,cACZ2C,EADY,gBAIcA,EAAYzC,OAJ1B,OAIZ4C,EAJY,OAKVhB,EAAagB,EAAkBC,QAErCP,EAAe,CACbT,OAAQD,IARM,2CAAH,qDAYXD,EAAU,KAEd,OAAoC,IAAhCQ,EAAaR,QAAQR,OAErB,yBAAK2B,GAAG,kBACN,+CACA,yBAAK7B,UAAU,aAInBU,EACE,6BACE,kBAAC,EAAD,CAASA,QAASQ,EAAcN,OAAQQ,KAKvC,yBAAKpB,UAAU,OAAOU,KC7CXoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlB,c","file":"static/js/main.2df81547.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Person.scss\";\n\nconst Person = props => {\n  const [state, setState] = useState({\n    species: [\"fetching species..\"],\n    films: []\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      //GET Species Data\n      const getSpecies = await fetch(props.species[0]);\n      let data = await getSpecies.json();\n      let speciesResults = await data.name;\n\n      //GET Film Data\n      const films = await Promise.all(\n        props.films.map(async filmUrl => {\n          let response = await fetch(filmUrl);\n          let data = await response.json();\n          return data;\n        })\n      );\n\n      setState({\n        species: speciesResults,\n        films: films\n      });\n    };\n\n    fetchData();\n  }, [props]);\n\n  const imageStyle = {\n    backgroundImage: `url(${props.image})`,\n    backgroundSize: \"cover\",\n    height: \"300px\",\n    width: \"100%\",\n    backgroundPosition: \"100%\"\n  };\n\n  return (\n    <div className=\"person\">\n      <div style={imageStyle}></div>\n      <h1 className=\"character-name\">{props.name}</h1>\n      <p className=\"character-species\">{state.species}</p>\n      <div className=\"titles\">\n        <p>Titles Featured In:</p>\n        {state.films.length === 0 ? (\n          <p>Fetching films ...</p>\n        ) : (\n          state.films.map((film, i) => {\n            return (\n              <li key={i} className=\"character-titles\">\n                <span>Episode: {film.episode_id}</span>\n                {film.title}\n              </li>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Person;\n","import React from \"react\";\nimport \"./Persons.scss\";\nimport Person from \"../Person/Person\";\n\nconst Persons = props => {\n  let personsData = props.persons.persons;\n  const imagesData = props.images.images;\n\n  const person = personsData.map((person, i) => {\n    Object.assign(person, { image: imagesData[i] });\n\n    return (\n      <Person\n        key={person.url}\n        name={person.name}\n        image={person.image}\n        species={person.species}\n        films={person.films}\n      />\n    );\n  });\n  return <div className=\"persons\">{person}</div>;\n};\nexport default Persons;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Persons from \"./components/Persons/Persons\";\n\nfunction App() {\n  const [personsState, setPersonsState] = useState({\n    persons: []\n  });\n\n  const [imagesState, setImagesState] = useState({\n    images: []\n  });\n\n  useEffect(() => {\n    getPersons();\n    getImages();\n  }, []);\n\n  const getPersons = async () => {\n    let apiResponse = await fetch(\"https://swapi.co/api/people/\");\n    let fetchedPersonsData = await apiResponse.json();\n    let personsData = await fetchedPersonsData.results;\n\n    setPersonsState({\n      persons: personsData\n    });\n  };\n\n  const getImages = async () => {\n    let apiResponse = await fetch(\n      \"https://dog.ceo/api/breed/hound/afghan/images/random/10\"\n    );\n    let fetchedImagesData = await apiResponse.json();\n    const imagesData = fetchedImagesData.message;\n\n    setImagesState({\n      images: imagesData\n    });\n  };\n\n  let persons = null;\n\n  if (personsState.persons.length === 0) {\n    return (\n      <div id=\"loader-wrapper\">\n        <h3>Loading Data...</h3>\n        <div className=\"loader\"></div>\n      </div>\n    );\n  } else {\n    persons = (\n      <div>\n        <Persons persons={personsState} images={imagesState} />\n      </div>\n    );\n  }\n\n  return <div className=\"App\">{persons}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}